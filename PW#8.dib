#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №8. Реализация планировщика команд.

**Цель:** Реализация длительных операций.

**Результаты:** После выполнения работы Вы сможете:
1. Сделать возможным в потоке выполнять длительные операции.

## Задание.
Пусть, в условиях практической работы №7, у нас есть поток с очередью, который в цикле извлекает команды из очереди и выполняет их.

Некоторые из команд не могут выполнить всю работу за один вызов метода Execute без блокирования на длительное время выполнения всех остальных командд из очереди.

Например, если какая-нибудь сетевая игра представлена командой, то пока одна игра не закончится, следующая не начнется. Чтобы эффективнее использовать процессорные
можности, нужно обеспечить возхможность поиграть как можно большему количеству игроков.

Для этого используют режим псевдопараллельной обработки. Когда все время работы разбивают на небольшие отрезки, каждый из которых выполняется
за один вызов метода Execute. Чтобы выполнить всю работу, нужно вызвать метод Execute несколько раз, до тех пор пока работа не будет завершена.
Это позволяет между вызовами Execute одного экземплыра команды вызывать метод Execute других команд.

Так устроен, например, ренедринг страницы в браузере. Только в браузеоре это используется не для рендеренга всех вкладок, а для обработки 
реакций пользователя на странице.

В прошлой работе все команды, которые выполнялись в потоке, брались из очереди. Поэтому первая идея - это положить долгоиграющую операцию обратно в очередь.
Но это может привести к состоянию мертвой блокировки потока: если очередь будет полна, то поток, который попытается сделать запись, будет заблокирован до тех пор, 
пока в очереди не появится свободное место. Поэтому нельзя в одном и том же потоке читать и писать в очередь неблокируемым образом.

Чтобы избежать мертвой блокировки потока, необходимо ввести понятие Планировщика, который будет отвечать за выбор следующей длительной задачи для выполнения,
а чтение из очереди оставить только для новых операций. 

#!csharp

public interface ICommand
{
    void Execute();
}

public interface IScheduler
{
    bool HasCommand();
    ICommand Select();
    void Add(ICommand cmd);
}

#!markdown

Необходимо реализовать поток, который способен реализоввывать длительные операции.

**Указание.** 
1. В практической работе №7 из очереди команды извлекались блокируеммым образом с помощью метода Take(), при наличии планировщика так делать нельзя: поток
может заснуть несмотря на наличие команд в планировщике до тех пор, пока не будет записана новая команда в очередь.

С другой стороны, если будем всегда читать неблокируемым образом, а в планировщике нет никакой работы, то будем тратить процессорное время без полезной нагрузки.

Необходимо учесть этот момент при реализации очереди.

2. Для обепечения справедливости стратегии планировщика в слабом смысле использовать стратегию Round Robbin (циклическую) для определения следующего потока на исполнение.

#!csharp

using System.Collections.Concurrent;
using System.Threading;

public class CombinedScheduler : IScheduler
{
    private bool useRoundRobin;
    private bool isThreadSafe;
    private Queue<ICommand> scheduledCommands;
    private ConcurrentQueue<ICommand> commandQueue;

    public CombinedScheduler(bool useRoundRobin = false, bool isThreadSafe = false)
    {
        this.useRoundRobin = useRoundRobin;
        this.isThreadSafe = isThreadSafe;
        if (isThreadSafe)
        {
            commandQueue = new ConcurrentQueue<ICommand>();
        }
        else
        {
            scheduledCommands = new Queue<ICommand>();
        }
    }

    public bool HasCommand()
    {
        if (isThreadSafe)
        {
            return !commandQueue.IsEmpty;
        }
        else
        {
            return scheduledCommands.Count > 0;
        }
    }

    public ICommand Select()
    {
        if (isThreadSafe)
        {
            if (commandQueue.TryDequeue(out ICommand command))
            {
                return command;
            }
            return null;
        }
        else
        {
            if (scheduledCommands.Count == 0)
            {
                throw new InvalidOperationException("Нет доступных команд.");
            }

            var cmd = scheduledCommands.Dequeue();
            if (useRoundRobin)
            {
                scheduledCommands.Enqueue(cmd);
            }
            return cmd;
        }
    }

    public void Add(ICommand cmd)
    {
        if (isThreadSafe)
        {
            commandQueue.Enqueue(cmd);
        }
        else
        {
            scheduledCommands.Enqueue(cmd);
        }
    }
}

#!csharp

public class ServerThread
{
    private readonly IScheduler scheduler;
    private readonly Thread thread;
    private volatile bool isRunning;
    private volatile bool softStopRequested;
    public int ThreadId { get; private set; }

    public ServerThread(IScheduler scheduler)
    {
        this.scheduler = scheduler;
        thread = new Thread(Run) { IsBackground = true };
        isRunning = true;
    }

    public void Start()
    {
        thread.Start();
    }

    public void Stop()
    {
        isRunning = false;
        thread.Join();
    }

    public void EnqueueCommand(ICommand command)
    {
        if (isRunning)
        {
            scheduler.Add(command);
        }
    }

    public void RequestSoftStop()
    {
        softStopRequested = true;
    }

    private void Run()
    {
        ThreadId = Thread.CurrentThread.ManagedThreadId;
        while (isRunning)
        {
            if (scheduler.HasCommand())
            {
                try
                {
                    var nextCommand = scheduler.Select();
                    nextCommand?.Execute();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Исключение: {ex.Message}");
                }
            }
            else
            {
                Thread.Sleep(10);
            }

            if (softStopRequested && !scheduler.HasCommand())
            {
                isRunning = false;
            }
        }
    }

    public bool IsRunning => isRunning;
}

#!csharp

public class HardStopCommand : ICommand
{
    private readonly ServerThread serverThread;

    public HardStopCommand(ServerThread serverThread)
    {
        this.serverThread = serverThread;
    }

    public void Execute()
    {
        if (Thread.CurrentThread.ManagedThreadId != serverThread.ThreadId)
            throw new InvalidOperationException("HardStop может выполняться только в потоке, который она останавливает.");

        serverThread.Stop();
        Console.WriteLine("Немедленная остановка выполнена.");
    }
}

public class SoftStopCommand : ICommand
{
    private readonly ServerThread serverThread;

    public SoftStopCommand(ServerThread serverThread)
    {
        this.serverThread = serverThread;
    }

    public void Execute()
    {
        if (Thread.CurrentThread.ManagedThreadId != serverThread.ThreadId)
            throw new InvalidOperationException("SoftStop может выполняться только в потоке, который она останавливает.");

        serverThread.RequestSoftStop();
        Console.WriteLine("Поток остановлен, так как в очереди потока закончились все Команды.");
    }
}

public class BasicCommand : ICommand
{
    private readonly string message;

    public BasicCommand(string message)
    {
        this.message = message;
    }

    public void Execute()
    {
        Console.WriteLine(message);
    }
}

#!csharp

bool useRoundRobin = true;

IScheduler scheduler = useRoundRobin ? new CombinedScheduler(useRoundRobin: true) : new CombinedScheduler();
ServerThread serverThread = new ServerThread(scheduler);
serverThread.Start();

for (int i = 0; i < 3; i++)
{
    serverThread.EnqueueCommand(new BasicCommand($"Выполнение команды {i + 1}"));
}

serverThread.EnqueueCommand(new SoftStopCommand(serverThread));
serverThread.EnqueueCommand(new BasicCommand("Добавление команд после запроса мягкой остановки..."));

Thread.Sleep(10);
Console.WriteLine("Выполнение немедленной остановки...");
serverThread.EnqueueCommand(new HardStopCommand(serverThread));

Thread.Sleep(10);
Console.WriteLine("Все операции завершены.");
